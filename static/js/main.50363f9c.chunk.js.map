{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","slice","length","calculateWinner","setState","concat","step","status","current","moves","map","move","desc","jumpTo","winner","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"kOAIA,SAASA,EAAOC,GAEd,OACE,wBACEC,UAAU,SACVC,QAASF,EAAME,QAFjB,SAIGF,EAAMG,Q,IAKPC,E,kKAEJ,SAAaC,GACZ,IAAD,OACE,OACE,cAACN,EAAD,CACEI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,oBAKxC,WAEE,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAErB,sBAAKP,UAAU,YAAf,UACGK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GA7BTC,IAAMC,WAoCpBC,E,kDAEJ,WAAYX,GACX,IAAD,8BACE,cAAMA,IACDY,MAAQ,CACXC,QAAS,CACP,CAACN,QAASO,MAAM,GAAGC,KAAK,QAE1BC,SAAS,EACTC,WAAY,GAPhB,E,+CAWA,SAAYZ,GAEV,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMK,WAAa,GAE9DV,EADUM,EAAQA,EAAQM,OAAO,GACfZ,QAAQW,QAG7BE,EAAgBb,IAAYA,EAAQF,KAIvCE,EAAQF,GAAKC,KAAKM,MAAMI,QAAU,IAAM,IACxCV,KAAKe,SAAS,CACZR,QAASA,EAAQS,OAAO,CAAC,CACvBf,QAASA,KAEXS,SAAUV,KAAKM,MAAMI,QACrBC,WAAYJ,EAAQM,Y,oBAIxB,SAAOI,GAELjB,KAAKe,SAAS,CACZJ,WAAYM,EACZP,QAAUO,EAAO,IAAO,M,oBAI5B,WACC,IAcKC,EAdN,OACQX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAAQP,KAAKM,MAAMK,YAE7BS,EAAQb,EAAQc,KAAI,SAACpB,EAASqB,GAClC,IAAMC,EAAOD,EAAO,eAAiBA,EAAO,mBAC5C,OACE,6BACE,wBAAQ1B,QAAS,kBAAM,EAAK4B,OAAOF,IAAnC,SAA2CC,KADpCD,MAMPG,EAASX,EAAgBK,EAAQlB,SAUvC,OANEiB,EAFCO,EAEQ,WAAaA,EAIhB,uBAAmBzB,KAAKM,MAAMI,QAAU,IAAM,KAGpD,sBAAKf,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CACEG,QAASkB,EAAQlB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAK2B,YAAY3B,QAGrC,sBAAKJ,UAAU,YAAf,UACE,8BAAMuB,IACN,6BAAKE,c,GA7EIjB,IAAMC,WA4FzB,SAASU,EAAgBb,GAYvB,IAVA,IAAM0B,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAED5B,EAAI,EAAGA,EAAI4B,EAAMd,OAAQd,IACjC,CAAC,IAAD,cACoB4B,EAAM5B,GAD1B,GACS6B,EADT,KACYC,EADZ,KACeC,EADf,KAEE,GAAG7B,EAAQ2B,IAAM3B,EAAQ2B,KAAO3B,EAAQ4B,IAAM5B,EAAQ2B,KAAO3B,EAAQ6B,GAEnE,OAAO7B,EAAQ2B,GAGnB,OAAO,KA1BTG,IAASC,OACP,cAAC3B,EAAD,IACA4B,SAASC,eAAe,W","file":"static/js/main.50363f9c.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props)\r\n{\r\n  return (\r\n    <button \r\n      className=\"square\" \r\n      onClick={props.onClick}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component\r\n{\r\n  renderSquare(i)\r\n  {\r\n    return (\r\n      <Square \r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render()\r\n  {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component\r\n{\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {squares: Array(9).fill(null)}, //creates array of 9 elements, each is null\r\n      ],\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n    };\r\n  }\r\n\r\n  handleClick(i)\r\n  {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length-1];\r\n    const squares = current.squares.slice();\r\n    //used slice to create a separate(deep copy) copy otherwise changes made to original one also.\r\n\r\n    if(calculateWinner(squares) || squares[i])\r\n    {//returns, if someone has won the game or if a Square is already filled(not null)\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n      xIsNext: !this.state.xIsNext,\r\n      stepNumber: history.length,\r\n    });\r\n  }\r\n\r\n  jumpTo(step)\r\n  {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  render()\r\n  {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n\r\n    const moves = history.map((squares, move) => {\r\n      const desc = move ? \"Go to move #\" + move : \"Go to game start\";\r\n      return(\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    const winner = calculateWinner(current.squares);\r\n    let status;\r\n    if(winner)\r\n    {\r\n      status = \"Winner: \" + winner;\r\n    }\r\n    else\r\n    {\r\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// returns null or 'X', or 'O'\r\nfunction calculateWinner(squares)//this is not a component(you can also see it by naming convention)\r\n{\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for(let i = 0; i < lines.length; i++)\r\n  {\r\n    const [a, b, c] = lines[i];\r\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c])//if squares[a]=>null then it equates to false\r\n    {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}"],"sourceRoot":""}